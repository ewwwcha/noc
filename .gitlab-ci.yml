---
stages:
  - lint
  - test
  - Build release container
  - Build additional release containers

flake8:
  stage: lint
  image: registry.getnoc.com/infrastructure/noc-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --name-only $(git rev-parse --abbrev-ref HEAD) $(git merge-base origin/HEAD HEAD) |egrep ".py$" || true)
    - if [ ! -z "$FLIST" ]; then flake8 $FLIST; else true; fi
  except:
    - master
  tags:
    - docker

yapf:
  stage: lint
  image: registry.getnoc.com/infrastructure/noc-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --name-only $(git rev-parse --abbrev-ref HEAD) $(git merge-base origin/HEAD HEAD) |egrep ".py$" || true)
    - if [ ! -z "$FLIST" ]; then yapf -d -vv $FLIST; else true; fi
  tags:
    - docker
  allow_failure: true

# waiting for https://github.com/rubik/xenon/issues/21
xenon:
  stage: lint
  image: registry.getnoc.com/infrastructure/noc-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --name-only $(git rev-parse --abbrev-ref HEAD) $(git merge-base origin/HEAD HEAD) |egrep ".py$" || true)
    - x=0
    #- if [ ! -z $FLIST ]; then xenon --max-absolute B --max-modules B --max-average B  $FLIST; fi
    - if [ ! -z "$FLIST" ]; then for i in "${FLIST}" ; do (xenon --max-absolute B --max-modules B --max-average B "$i"; let x+=$?); done; fi
    - if [ "$x" -gt 0 ] ; then exit 1; fi
  except:
    - master
  tags:
    - docker
  allow_failure: true

pylint:
  stage: lint
  image: registry.getnoc.com/infrastructure/noc-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --name-only $(git rev-parse --abbrev-ref HEAD) $(git merge-base origin/HEAD HEAD) |egrep ".py$" || true)
    - if [ ! -z "$FLIST" ]; then pylint "$FLIST" ; else true; fi
  except:
    - master
  tags:
    - docker

futurize:
  stage: lint
  image: registry.getnoc.com/infrastructure/noc-lint:master
  script:
    - FLIST=$(git --no-pager diff --name-only $(git rev-parse --abbrev-ref HEAD) $(git merge-base origin/HEAD HEAD) |egrep ".py$" || true)
    - /bin/future.sh "$FLIST"
  except:
    - master
  tags:
    - docker

test_migrate:
  stage: test
  image: registry.getnoc.com/noc/nocmc/microservices:build
  variables:
    NOC_PG_DB: noc
    NOC_PG_USER: noc
    NOC_PG_PASSWORD: noc
    BRANCH: microservices
  services:
    - name: registry.getnoc.com/infrastructure/postgres:dev
      alias: postgres
    - name: registry.getnoc.com/infrastructure/mongo:dev
      alias: mongo
    - name: registry.getnoc.com/infrastructure/clickhouse:master
      alias: clickhouse
  before_script:
    - export NOC_PG_ADDRESSES=registry.getnoc.com-infrastructure-postgres:5432
    - export NOC_MONGO_ADDRESSES=registry.getnoc.com-infrastructure-mongo:27017
    - export NOC_CLICKHOUSE_RW_ADDRESSES=registry.getnoc.com-infrastructure-clickhouse:8123
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR:$CI_PROJECT_DIR/../
  script:
    - find . -type f -name "*.py" -print0 | xargs -0 python -m py_compile
    - /usr/bin/cythonize -i speedup/*.pyx
    - python ./commands/migrate.py
    - python ./commands/migrate-ch.py
  only:
    - master
  tags:
    - docker

test_noc:
  stage: test
  image: registry.getnoc.com/noc/nocmc/microservices:build
  variables:
    NOC_PG_DB: noc
    NOC_PG_USER: noc
    NOC_PG_PASSWORD: noc
    BRANCH: microservices
  services:
    - name: registry.getnoc.com/infrastructure/postgres:master
      alias: postgres
    - name: registry.getnoc.com/infrastructure/mongo:master
      alias: mongo
    - name: registry.getnoc.com/infrastructure/clickhouse:master
      alias: clickhouse
  before_script:
    - export NOC_PG_ADDRESSES=registry.getnoc.com-infrastructure-postgres:5432
    - export NOC_MONGO_ADDRESSES=registry.getnoc.com-infrastructure-mongo:27017
    - export NOC_CLICKHOUSE_RW_ADDRESSES=registry.getnoc.com-infrastructure-clickhouse:8123
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR:$CI_PROJECT_DIR/../
  script:
    - mkdir -p ./var/coverage ./var/report
    - find . -type f -name "*.py" -print0 | xargs -0 python -m py_compile
    - /usr/bin/cythonize -i speedup/*.pyx
    - python ./commands/test.py run --coverage-report=./var/coverage --test-report=./var/report/index.html --statistics
  tags:
    - docker
  artifacts:
    paths:
      - ./var/coverage
      - ./var/report
    when: always
    expire_in: 1 week
    untracked: false
  allow_failure: true

Build release image:
  stage: Build release container
  before_script:
    # registry.getnoc.com/noc/noc/code:stable
    - export CONTAINER_NAME=$CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_NAME -f .docker/Dockerfile .
    - docker push $CONTAINER_NAME
    - docker rmi $CONTAINER_NAME
  tags:
    - shell
  only:
    - tags

Build nginx image:
  stage: Build additional release containers
  before_script:
    # registry.getnoc.com/noc/noc/static:stable
    - export CONTAINER_NAME=$CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --no-cache --build-arg IMAGE=$CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG -t ${CONTAINER_NAME} -f Dockerfile.nginx .
    - docker push ${CONTAINER_NAME}
    - docker rmi ${CONTAINER_NAME}
  tags:
    - shell
  only:
    - tags

Build dev image:
  stage: Build additional release containers
  before_script:
    # registry.getnoc.com/noc/noc/dev:stable
    - export CONTAINER_NAME=$CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --no-cache --build-arg IMAGE=$CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG -t ${CONTAINER_NAME} -f Dockerfile.dev .
    - docker push ${CONTAINER_NAME}
    - docker rmi ${CONTAINER_NAME}
  tags:
    - shell
  only:
    - tags
